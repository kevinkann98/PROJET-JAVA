
/*

 * To change this license header, choose License Headers in Project Properties.

 * To change this template file, choose Tools | Templates

 * and open the template in the editor.

 */

package Vue;



import DAO.PersonneDAO;

import Modele.Personne;

import static com.sun.jmx.mbeanserver.Util.cast;

import java.awt.BorderLayout;

import java.awt.Color;

import java.awt.Dimension;

import java.sql.SQLException;

import java.util.ArrayList;

import java.util.logging.Level;

import java.util.logging.Logger;

import javax.swing.JOptionPane;

import javax.swing.JTable;

import javax.swing.table.DefaultTableModel;

import javax.swing.table.TableModel;



/**

 *

 * @author kevin

 */

public class Persons extends javax.swing.JFrame {



    static ArrayList<Personne> personnes= new ArrayList();       

    static PersonneDAO personnesDAO;

    static DefaultTableModel modelStudent;   

    static String type;

    

        

    /**

     * Creates new form Rechercher

     * @param type0 le type de personne Ã  afficher etudiant ou enseignant?

     */

    public Persons(String type0) { 

        type=type0;

        

        initComponents();

        modelStudent=(DefaultTableModel)jTable1.getModel();

        fillPersons();         

        

    }

    

    /**

     *Remplit le tableau de personnes

     */

    public void fillPersons(){

        

        try {

            

            personnesDAO = new PersonneDAO();           

            //On recupere tout le monde

            personnes=personnesDAO.all(type);        

            pack();

            

            for(int i=0;i<personnes.size();i++){

                int id=personnes.get(i).getId();

                String nom=personnes.get(i).getNom();

                String prenom=personnes.get(i).getPrenom();

                String type=personnes.get(i).getType();

                

                Object[] pers={id,nom,prenom,type}; //Creation de l'objet

                modelStudent.insertRow(jTable1.getRowCount(), pers); //Ajout en fin de tableau

               

            }            

            

        } catch (ClassNotFoundException | SQLException ex) {

            JOptionPane.showMessageDialog(rootPane, "Il semblerait qu'une erreur soit survenue.");

        }      

        

    }

    

public void findPersons(int find){

        

        try {

            

            personnesDAO = new PersonneDAO();           

            //On recupere tout le monde

            personnes=personnesDAO.all(type);        

            pack();

            

            int findI = 0;

            

            //Boucle de recherche

            for(int j=0;j<personnes.size();j++){

                int id = personnes.get(j).getId();

                

                if(id == find)

                {findI=j; // findi enregistre le j de la personne ayant l'ID recherché

                }       

            }   

            

            if(findI!=0) {



                int id=personnes.get(findI).getId();

                String nom=personnes.get(findI).getNom();

                String prenom=personnes.get(findI).getPrenom();

                String type=personnes.get(findI).getType();



                Object[] pers={id,nom,prenom,type}; //Creation de l'objet

                modelStudent.insertRow(jTable1.getRowCount(), pers); //Ajout en fin de tableau

            }

            else

            {

            	System.out.println("ID inconnu.");

            }

               

                      

            

        } catch (ClassNotFoundException | SQLException ex) {

            JOptionPane.showMessageDialog(rootPane, "Il semblerait qu'une erreur soit survenue.");

        }      

        

    }



    /**

     * This method is called from within the constructor to initialize the form.

     * WARNING: Do NOT modify this code. The content of this method is always

     * regenerated by the Form Editor.

     */

    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents

    private void initComponents() {



        jScrollPane1 = new javax.swing.JScrollPane();

        jTable1 = new javax.swing.JTable();

        jButton1 = new javax.swing.JButton();

        jButton2 = new javax.swing.JButton();

        jButton3 = new javax.swing.JButton();

        jButton4 = new javax.swing.JButton();

        recherche = new javax.swing.JTextField();

        jLabel1 = new javax.swing.JLabel();

        jButton5 = new javax.swing.JButton();



        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);



        jTable1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTable1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(

            new Object [][] {



            },

            new String [] {

                "Identifiant", "Nom", "Prenom", "Type"

            }

        ) {

            boolean[] canEdit = new boolean [] {

                false, true, true, true

            };



            public boolean isCellEditable(int rowIndex, int columnIndex) {

                return canEdit [columnIndex];

            }

        });

        jTable1.setRowHeight(30);

        jTable1.setRowMargin(0);

        jTable1.getTableHeader().setResizingAllowed(false);

        jTable1.getTableHeader().setReorderingAllowed(false);

        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {

                jTable1MouseClicked(evt);

            }

        });

        jScrollPane1.setViewportView(jTable1);



        jButton1.setText("Ajouter");

        jButton1.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {

                jButton1ActionPerformed(evt);

            }

        });



        jButton2.setText("Supprimer");

        jButton2.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {

                jButton2ActionPerformed(evt);

            }

        });



        jButton3.setText("Modifier");

        jButton3.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {

                jButton3ActionPerformed(evt);

            }

        });



        jButton4.setText("Retour");

        jButton4.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {

                jButton4ActionPerformed(evt);

            }

        });



        jLabel1.setText("Saisir l'ID:");



        jButton5.setText("Rechercher");

        jButton5.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {

                jButton5ActionPerformed(evt);

            }

        });



        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());

        getContentPane().setLayout(layout);

        layout.setHorizontalGroup(

            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)

            .addGroup(layout.createSequentialGroup()

                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)

                    .addGroup(layout.createSequentialGroup()

                        .addGap(365, 365, 365)

                        .addComponent(jButton1)

                        .addGap(152, 152, 152)

                        .addComponent(jButton2)

                        .addGap(153, 153, 153)

                        .addComponent(jButton3))

                    .addGroup(layout.createSequentialGroup()

                        .addGap(65, 65, 65)

                        .addComponent(jButton4)

                        .addGap(169, 169, 169)

                        .addComponent(jLabel1)

                        .addGap(73, 73, 73)

                        .addComponent(recherche, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)

                        .addGap(58, 58, 58)

                        .addComponent(jButton5))

                    .addGroup(layout.createSequentialGroup()

                        .addGap(210, 210, 210)

                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1070, javax.swing.GroupLayout.PREFERRED_SIZE)))

                .addContainerGap(220, Short.MAX_VALUE))

        );

        layout.setVerticalGroup(

            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)

            .addGroup(layout.createSequentialGroup()

                .addGap(43, 43, 43)

                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)

                    .addComponent(jButton4)

                    .addComponent(recherche, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)

                    .addComponent(jLabel1)

                    .addComponent(jButton5))

                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)

                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)

                .addGap(18, 18, 18)

                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)

                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)

                        .addComponent(jButton2)

                        .addComponent(jButton3))

                    .addComponent(jButton1))

                .addGap(136, 136, 136))

        );



        pack();

    }// </editor-fold>//GEN-END:initComponents



    

    //Ajouter un etudiant

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        // TODO add your handling code here:

        AddPerson addpers= new AddPerson();

        addpers.setVisible(true);

        

    }//GEN-LAST:event_jButton1ActionPerformed



    //Retour au menu principal

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        // TODO add your handling code here:

        MenuPrincipal menu=new MenuPrincipal();

        menu.setVisible(true);

        dispose();

    }//GEN-LAST:event_jButton4ActionPerformed





    

    //Supprimer

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        try {

             

            if(jTable1.getSelectedRow()==-1){//Si aucune ligne est selectionnee

                if(modelStudent.getRowCount()==0){

                    JOptionPane.showMessageDialog(rootPane, "Le tableau est vide.");                  

                }

                else{

                    JOptionPane.showMessageDialog(rootPane, "Selectionner une ligne.");

                }

                

            }

            else{

                

                // TODO add your handling code here:

                PersonneDAO personneDAO=new PersonneDAO();

                Personne personne=new Personne();



                int currentRow=jTable1.getSelectedRow();



                int id=(int) modelStudent.getValueAt(currentRow,0);//RÃ©cupÃ¨rer l'id de la case sÃ©lectionnÃ©e

                

                System.out.println(id);

                personne=personneDAO.find(id); //Trouver la personne dans la bdd avec l'id



                System.out.println("current row:"+currentRow);

                //Demande de confirmation

                int confirm=JOptionPane.showConfirmDialog(null, "Voulez-vous vraiment supprimer "+personne.getNom()+" "+personne.getPrenom()+" ?");

                if(confirm==JOptionPane.YES_OPTION){                   

                    personneDAO.delete(personne); //Enlever de la bdd

                    modelStudent.removeRow(currentRow);   

                    

                    //Mettre Ã  jour l'arraylist de personnes

                    personnes=personneDAO.all(type);

                }



            }

            

            

        } catch (ClassNotFoundException | SQLException ex) {

            Logger.getLogger(Persons.class.getName()).log(Level.SEVERE, null, ex);

        }

        

    }//GEN-LAST:event_jButton2ActionPerformed



    

  

    

    //Recherche les etudiants par id

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        // TODO add your handling code here:

		

		for (int i =jTable1.getRowCount()-1;i>=0;i--) 

		{

		modelStudent.removeRow(i);   		

		}

		

		String rechercheStr = recherche.getText(); //recuperation depuis la boite Jtextfield

		int rechercheInt; 



		if( rechercheStr != "") {

		System.out.println("balise");

		rechercheInt = Integer.parseInt(rechercheStr); //Conversion de Str vers int

		findPersons(rechercheInt);

		}

		else {

			System.out.println("ID inconnu");

		}



        

    }//GEN-LAST:event_jButton5ActionPerformed



    

    //Modifier une ligne 

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        try {

            // TODO add your handling code here:

            

            Personne personne=new Personne();

            PersonneDAO personneDAO=new PersonneDAO();

            

            if(jTable1.getSelectedRow()==-1){ //Si aucune ligne selectionnee...

                if(modelStudent.getRowCount()==0){

                   JOptionPane.showMessageDialog(rootPane, "Le tableau est vide.");

                    

                }

                else{

                    JOptionPane.showMessageDialog(rootPane, "SÃ©lectionner une ligne.");

                }

            }

            else{

                

                //Recuperer toutes les valeurs de la ligne selectionnÃ©e puis update la bdd

                int currentRow=jTable1.getSelectedRow();

                

                int id= (int) modelStudent.getValueAt(currentRow, 0); //Recuperer l'id

                String nom=(String) modelStudent.getValueAt(currentRow, 1); //Recupere le nom

                String prenom=(String)modelStudent.getValueAt(currentRow,2); //Recuperer le prenom

                String type=(String)modelStudent.getValueAt(currentRow,3); //Recupere le type

                

                

                                   

                personne=new Personne(id,nom,prenom,type); //instanciation





                    if(personne.equals(personneDAO.update(personne))){              

                      JOptionPane.showMessageDialog(rootPane, "Modification effectuÃ©e avec succÃ¨s."); 

                      personnes=personnesDAO.all(type); //On met Ã  jour l'arraylist

                    }

                    else

                      throw new SQLException(); 

            }



 

                     

            

        } catch (ClassNotFoundException | SQLException ex) {

            JOptionPane.showMessageDialog(rootPane, "Oups...une erreur technique s'est produite");

        }

    }//GEN-LAST:event_jButton3ActionPerformed



    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

        // TODO add your handling code here:

    }//GEN-LAST:event_jTable1MouseClicked





    // Variables declaration - do not modify//GEN-BEGIN:variables

    private javax.swing.JButton jButton1;

    private javax.swing.JButton jButton2;

    private javax.swing.JButton jButton3;

    private javax.swing.JButton jButton4;

    private javax.swing.JButton jButton5;

    private javax.swing.JLabel jLabel1;

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JTable jTable1;

    private javax.swing.JTextField recherche;

    // End of variables declaration//GEN-END:variables



}
