/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vue;
import DAO.BulletinDAO;
import DAO.DetailBulletinDAO;
import DAO.TrimestreDAO;
import Modele.Bulletin;
import Modele.DetailBulletin;
import Modele.Discipline;
import Modele.Personne;
import Modele.Trimestre;
import static Vue.OneClass.*;
import static Vue.Classes.classe;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Affiche les trimestres et les bulletins
 * @author kevin
 */
public class SchoolReport extends javax.swing.JFrame {
    
    ArrayList<Trimestre> allQuarters =new ArrayList<>(); //Tous les trimestres de la table
    TrimestreDAO quarterdao;
    Trimestre trimestre=new Trimestre(); //Trimestre courant
    
    Bulletin bulletin; //Bulletin courant
    BulletinDAO bulletindao;
    ArrayList<Bulletin>allReports=new ArrayList<>(); //Tous les bulletins de la table
    
    ArrayList<DetailBulletin> allDetails=new ArrayList<>(); //Tous les détails de bulletin
    DetailBulletinDAO detaildao;
    
    private DefaultTableModel modelReport;
    
    

    /**
     * Creates new form Bulletin
     */
    public SchoolReport() {
        initComponents();
        
        modelReport=(DefaultTableModel)jTable2.getModel();
        
        //Remplir les trimestres et les infos de l'étudiant
        fillQuarters();
        jLabel1.setText(inscription.getPersonne().getNom()+" "+inscription.getPersonne().getPrenom()+" "+inscription.getClasse().getNom());
        
        
    }
    
    //On récupère les 3 trimestres de l'année, s'il en manque les créer...
    public void fillQuarters(){
        
        try {
            quarterdao=new TrimestreDAO();
            allQuarters=quarterdao.all();
            
            //quarters.addItem("None");
            
            //Remplir les choix de trimestre de l'année correspondante
            for(int i=0;i<allQuarters.size();i++){
                if(allQuarters.get(i).getAnnee().equals(classe.getAnnee())){
                    allQuarters.get(i).afficher(); //Un trimestre de l'année
                    int numero= allQuarters.get(i).getNumero();
                    quarters.addItem(""+numero);
                }
                
            }
            
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(SchoolReport.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        quarters = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Trimestre:");

        quarters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quartersActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Discipline", "Enseignant", "Moyenne de l'élève", "Appréciation"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setRowHeight(40);
        jScrollPane1.setViewportView(jTable2);

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jLabel3.setText("Appréciation générale:");

        jButton1.setText("Sauvegarder les modifications");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(281, 281, 281)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(quarters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(77, 77, 77))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(293, 293, 293))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel1)
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(quarters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jButton1)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Retourne un trimestre de l'arraylist des trimestres en fonction de son numéro de trimestre (1,2 ou 3)
     * @return
     */
    public Trimestre findQuarter(int numero){
        Trimestre trimestre=null;
        
        for(int i=0;i<allQuarters.size();i++){
            if(allQuarters.get(i).getAnnee().equals(classe.getAnnee())){
                if(allQuarters.get(i).getNumero()==numero){
                    trimestre=allQuarters.get(i);
                }
                
            }
        }
        
        return trimestre;
        
    }
    
    /**
     * Créer un bulletin avec le trimestre et l'inscription courants et les details de bulletin
     */
    public void addReport(){
         int id_bulletin=0;
         String appreciation="";                           
         bulletin=new Bulletin(id_bulletin,appreciation,trimestre,inscription);
         bulletin=bulletindao.create(bulletin);                          
         allReports=bulletindao.all(); //Mettre à jour tous les bulletins
         addDetails();
    }
    
    /**
     * Créer tous les détails d'un bulletin avec un enseignement
     */
    public void addDetails(){
        
        try {
           detaildao=new DetailBulletinDAO();
            
            //Créer les details de chaque enseignement pour le bulletin
            for(int i=0;i<allEnseignements.size();i++){
                if(allEnseignements.get(i).getClasse().equals(classe)){
                    
                    //Récuperer les infos de l'enseignement et créer un detail de bulletin
                    Discipline discipline=allEnseignements.get(i).getDiscipline();
                    Personne nom_enseignant=allEnseignements.get(i).getPersonne();
                    int id_detail=0;
                    String appreciation="";
                    
                    DetailBulletin detail=new DetailBulletin(id_detail,appreciation,bulletin,allEnseignements.get(i));                     
                    detail=detaildao.create(detail); //Créer le détail de bulletin dans la bdd
                    allDetails.add(detail); //Ajouter les details dans un arraylist

                }
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(SchoolReport.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Remplit le tableau avec les details de bulletin avec l'enseignement: discipline, nom de l'enseignant, moyenne de l'eleve et appreciation
     */
    public void fillDetails(){
        try {
            detaildao=new DetailBulletinDAO();
            allDetails=detaildao.all();
            
            for(int i=0;i<allDetails.size();i++){               //Id du bulletin courant
                if(allDetails.get(i).getBulletin().getId_bulletin()==bulletin.getId_bulletin()){
                    String nom_discipline=allDetails.get(i).getEnseignement().getDiscipline().getNom();
                    String nom_enseignant=allDetails.get(i).getEnseignement().getPersonne().getNom()+" "+allDetails.get(i).getEnseignement().getPersonne().getPrenom();
                    float moyenne=0;
                    String appreciation=allDetails.get(i).getAppreciation();
                    
                    Object [] infos={nom_discipline,nom_enseignant,moyenne,appreciation};
                    modelReport.insertRow(jTable2.getRowCount(), infos);
                    //allDetails.get(i).afficher();
                    
                }
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(SchoolReport.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    //Choisir le trimestre correspondant à l'inscription (classe & etudiant) et afficher le bulletin avec toutes ses infos
    //Si il n'existe pas, le créer.
    private void quartersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quartersActionPerformed
                 
                try {
                // TODO add your handling code here:
                
                bulletindao=new BulletinDAO();
                allReports=bulletindao.all();
                
                //Clear le tableau
                modelReport.setRowCount(0);

                //Récuperer le trimestre sélectionné dans l'arraylist de trimestre,
                int numero=Integer.parseInt((String) quarters.getSelectedItem());           
                if(findQuarter(numero)!=null){
                    trimestre=findQuarter(numero);
                }
                else{
                    
                    throw new SQLException();
                }
                
                boolean reportfound=false;

                //Trouver le bulletin correspondant à l'inscription et le trimestre courant, si le bulletin n'existe pas, le créer
                for(int i=0;i<allReports.size();i++){
                    if(allReports.get(i).getInscription().equals(inscription)){
                        if(allReports.get(i).getTrimestre().equals(trimestre)){
                            bulletin=allReports.get(i); //Récuperer les infos du bulletin
                            reportfound=true;
                            
                            //Et remplir les appréciations dans le textArea
                            fillReport();
                            
                            //Et les détails...
                            fillDetails();
                        }
                    }            
                }
                
                //Si bulletin non trouvé dans l'arraylist, le créer avec tous les détails d'enseignements
                if(reportfound==false){                  
                    addReport();    
                    
                    fillDetails();
                    //Et remplir les appréciations dans le textArea
                    fillReport();
                }              
                //bulletin.afficher();             
                
            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(rootPane,"Bulletin non trouvé");
            }
        

    }//GEN-LAST:event_quartersActionPerformed

    
    //Update un bulletin et le sauvegarder
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
            
            String appreciation=jTextArea1.getText();
            detaildao=new DetailBulletinDAO();
            
            
            //Modifier un detail de bulletin (seulement la moyenne et l'appreciation
            int currentRow=jTable2.getSelectedRow();
                           
            /*for(int i=0;i<allDetails.size();i++){
                if(allDetails.get(i).getBulletin().getId_bulletin()==bulletin.getId_bulletin()){
                    allDetails.get(i).setAppreciation((String)modelReport.getValueAt(currentRow,3));
                    detaildao.update(allDetails.get(i));
                }
            }*/
            
            
            //Modifier une appréciation
            System.out.println("Bulletin modifie:");
            bulletin.setAppreciation(appreciation);
            bulletin.afficher();
            
            if(bulletin.equals(bulletindao.update(bulletin))){
                JOptionPane.showMessageDialog(rootPane, "Bulletin sauvegardé.");
                allReports=bulletindao.all();
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(SchoolReport.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     *Remplir le tableau de bulletin
     */
    public void fillReport(){
        jTextArea1.setText(bulletin.getAppreciation());
    }
    
    
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JComboBox<String> quarters;
    // End of variables declaration//GEN-END:variables
}
