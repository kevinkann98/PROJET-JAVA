/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Vue;

import DAO.DisciplineDAO;
import DAO.EnseignementDAO;
import DAO.InscriptionDAO;
import DAO.PersonneDAO;
import Modele.Classe;
import Modele.Discipline;
import Modele.Enseignement;
import Modele.Inscription;
import Modele.Personne;
import static Vue.Classes.classe;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *Affiche une classe spécifique, permet aussi d'ajouter et supprimer des étudiants de la classe
 * @author kevin
 */
public class OneClass extends javax.swing.JFrame {

    
    static Inscription inscription=new Inscription(); //Une inscription!
    InscriptionDAO inscriptiondao;  
    ArrayList<Inscription> inscriptions= new ArrayList<>();
    
    ArrayList<Discipline> allSubjects=new ArrayList<>();
    
    static ArrayList<Enseignement> allEnseignements=new ArrayList<>(); //Tous les enseignements de la table
    EnseignementDAO enseignementdao;
    Enseignement enseignement;
    
    private final DefaultTableModel modelClass;
    private final DefaultTableModel modelEnseignement;
    
    /** Creates new form OneClass
     * */
    public OneClass() {
        initComponents();
        
        modelClass=(DefaultTableModel) jTable1.getModel();  
        modelEnseignement=(DefaultTableModel) jTable2.getModel();
        
        className.setText(classe.getNom()+" "+classe.getNiveau().getNom()+" "+classe.getAnnee().getId_anneeScolaire());
      
        fillStudents(); //Remplir le tableau avec les étudiants de la classe
        fillSubjects(); //Remplir le dropdown list avec les disciplines possibles
        fillEnseignements();
        
    }
    
    /**
     *Remplir le tableau avec les étudiants de la classe
     */
    public void fillStudents(){
        
        try {
            
            
            //On récupère d'abord les inscriptions
            inscriptiondao=new InscriptionDAO();
            inscriptions=inscriptiondao.all();
            
            
            //Récupérer les étudiants de la classe
            for(int i=0;i<inscriptions.size();i++){
                inscriptions.get(i).afficher();
                if(inscriptions.get(i).getClasse().getId_classe()==classe.getId_classe()){
                    
                    String nom=inscriptions.get(i).getPersonne().getNom();
                    String prenom=inscriptions.get(i).getPersonne().getPrenom();
                                      
                    Object []infos={inscriptions.get(i).getId_inscription(), nom, prenom};
                    
                    modelClass.insertRow(jTable1.getRowCount(), infos);                   
                    
                }
            }
         
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(OneClass.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        className = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        deleteStudent = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        addStudent = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jTextField2 = new javax.swing.JTextField();
        subjects = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        addProf = new javax.swing.JButton();
        deleteProf = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        className.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N

        jTable1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N° Inscription", "Nom", "Prénom"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(25);
        jScrollPane1.setViewportView(jTable1);

        deleteStudent.setText("Retirer de la classe");
        deleteStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteStudentActionPerformed(evt);
            }
        });

        jTextField1.setText("Identifiant de l'étudiant");

        addStudent.setText("Ajouter dans la classe");
        addStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStudentActionPerformed(evt);
            }
        });

        jTable2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N° Enseignement", "Nom", "Prénom", "Discipline"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setRowHeight(25);
        jScrollPane2.setViewportView(jTable2);

        jTextField2.setText("Identifiant de l'enseignant");

        jLabel1.setText("Sélectionner ou créer une discpiline:");

        addProf.setText("Ajouter dans la classe");
        addProf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProfActionPerformed(evt);
            }
        });

        deleteProf.setText("Retirer de la classe");
        deleteProf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteProfActionPerformed(evt);
            }
        });

        jTextField3.setText("Nouveau");

        jButton1.setText("Afficher le bulletin");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(405, 405, 405)
                .addComponent(className)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1)
                    .addComponent(addStudent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteStudent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(subjects, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addProf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteProf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 664, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGap(34, 34, 34))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(className)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(addStudent)
                        .addGap(37, 37, 37)
                        .addComponent(deleteStudent)
                        .addGap(39, 39, 39)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(subjects, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addComponent(addProf)
                        .addGap(48, 48, 48)
                        .addComponent(deleteProf)
                        .addGap(118, 118, 118))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    //Retirer un etudiant de la classe (inscription à supprimer de la bdd)
    private void deleteStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteStudentActionPerformed
        // TODO add your handling code here:      
        
        
        if(jTable1.getSelectedRow()==-1){//Si aucune ligne est selectionnee
            if(modelClass.getRowCount()==0){
                JOptionPane.showMessageDialog(rootPane, "Le tableau est vide.");
            }
            else{
                JOptionPane.showMessageDialog(rootPane, "Selectionner une ligne.");                
            }
            
        }
        else{
            try {
                inscription=new Inscription();
                inscriptiondao=new InscriptionDAO();
                
                int currentRow=jTable1.getSelectedRow();
                int id_inscription=(int) modelClass.getValueAt(currentRow, 0); //Récupérer l'id d'inscription à supprimer
                String nom=(String) modelClass.getValueAt(currentRow, 1);
                String prenom=(String) modelClass.getValueAt(currentRow, 2);
                
                inscription=inscriptiondao.find(id_inscription);
                
                //Demande de confirmation
                int confirm=JOptionPane.showConfirmDialog(null, "Voulez-vous vraiment retirer "+nom+" "+prenom+" de la classe ?");
                
                if(confirm==JOptionPane.YES_OPTION){                   
                    inscriptiondao.delete(inscription); //Enlever de la bdd
                    modelClass.removeRow(currentRow);
                    
                    ///on met à jour l'arraylist d'inscriptions
                    inscriptions=inscriptiondao.all();
                }
                
                
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(OneClass.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        
    }//GEN-LAST:event_deleteStudentActionPerformed

    
    //Ajouter un étudiant dans la classe (création d'une ligne d'inscription)
    private void addStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStudentActionPerformed
        try {
            // TODO add your handling code here:
            inscription=new Inscription();           
            inscriptiondao=new InscriptionDAO();
            Personne personne=new Personne();
            PersonneDAO personnedao=new PersonneDAO();
            
            int id_inscription=0;
            
            //Récupérer la classe et l'étudiant sélectionné
            int id_personne=Integer.parseInt(jTextField1.getText());
            
            //Un même étudiant ne peut être inscrit qu'une seule fois
            for(int i=0;i<inscriptions.size();i++){
                if(inscriptions.get(i).getClasse().getId_classe()==classe.getId_classe() && inscriptions.get(i).getPersonne().getId()==id_personne)
                    throw new SQLException();
            }
            
            if(personnedao.find(id_personne)==null)
                throw new SQLException();
            
                    
            else{
                personne=personnedao.find(id_personne);
                
                if(!personne.getType().equals("etudiant")){
                    JOptionPane.showMessageDialog(rootPane, personne.getNom()+" "+personne.getPrenom()+"n'est pas un étudiant");

                }
                else{
                  

                    //Demander confirmation
                    int confirm=JOptionPane.showConfirmDialog(null, "Ajouter "+personne.getNom()+" "+personne.getPrenom()+" ?");
                    if(confirm==JOptionPane.YES_OPTION){
                        //Instancier une inscription
                        inscription=new Inscription(id_inscription,classe,personne);
                        inscription=inscriptiondao.create(inscription);

                        Object [] student={personne.getId(),personne.getNom(),personne.getPrenom()};
                        modelClass.insertRow(jTable1.getRowCount(), student);
                        
                        inscriptions=inscriptiondao.all();

                    }  
                }
                
        }
            
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Il semblerait qu'une erreur soit survenue.");
        }
    }//GEN-LAST:event_addStudentActionPerformed

    
    
    //Ajouter les disciplines disponibles
    public void fillSubjects(){
        
        try {
            DisciplineDAO disciplinedao=new DisciplineDAO();
            allSubjects=disciplinedao.all();
            subjects.addItem("None");
            for(int i=0;i<allSubjects.size();i++){
                subjects.addItem(allSubjects.get(i).getNom());
            }
            
            
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(OneClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    //Afficher la liste des enseignements de la classe(avec le prof et la discipline enseignée)
    public void fillEnseignements(){
        try {
            enseignementdao=new EnseignementDAO();
            allEnseignements=enseignementdao.all();
            
            for(int i=0;i<allEnseignements.size();i++){
                //allEnseignements.get(i).afficher();
                if(allEnseignements.get(i).getClasse().getId_classe()==classe.getId_classe()){
                    
                    int id_enseignement=allEnseignements.get(i).getId_enseignement();
                    String nom=allEnseignements.get(i).getPersonne().getNom();
                    String prenom=allEnseignements.get(i).getPersonne().getPrenom();
                    String name_subject=allEnseignements.get(i).getDiscipline().getNom();                                     
                    
                   
                    
                    Object[]infos={id_enseignement,nom,prenom,name_subject};
                    modelEnseignement.insertRow(jTable2.getRowCount(), infos);
                    
                }
            }
            
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(OneClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


    //Trouve une discipline avec le nom en param
    public Discipline findSubject(String subject_name){
        Discipline discipline=null;
        for(int i=0;i<allSubjects.size();i++){
            if(allSubjects.get(i).getNom().equals(subject_name))
            discipline=new Discipline(allSubjects.get(i).getId_discipline(),allSubjects.get(i).getNom());
        }
        
        return discipline;
    }
    
    //Ajouter un prof dans une classe (création d'une ligne d'enseignement)
    private void addProfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProfActionPerformed
        try {
            // TODO add your handling code here:
            enseignement=new Enseignement();
            enseignementdao=new EnseignementDAO();
            
            Personne personne=new Personne();
            PersonneDAO personnedao=new PersonneDAO();
            Discipline discipline=new Discipline();
            DisciplineDAO disciplinedao=new DisciplineDAO();
            
            int id_enseignement=0;
            
            //Réupérations des données saisies
            int id_prof=Integer.parseInt(jTextField2.getText());
            
            String subject_name=(String) subjects.getSelectedItem();
            
            //Si l'utilisateur saisit "None", créer une nouvelle discipline
            
            if(subject_name!="None"){
                    discipline=findSubject(subject_name); 
                if(discipline==null)
                    throw new SQLException();
            }
            else if(!jTextField3.getText().equals(""))
            {
                subject_name=(String)jTextField3.getText();
                int id_subject=0;
                
                discipline=new Discipline(id_subject,subject_name);
                discipline=disciplinedao.create(discipline);
                
                jTextField3.setText("Nouveau");
                
            }
            else
                throw new SQLException();
            
            
            
            
            //Un enseignant ne peux pas dispenser deux fois une même matière dans la même classe
            for(int i=0;i<allEnseignements.size();i++){
                if(allEnseignements.get(i).getClasse().getId_classe()==classe.getId_classe()){
                    if(allEnseignements.get(i).getPersonne().getId()==id_prof && allEnseignements.get(i).getDiscipline().getNom().equals(subject_name)){
                        throw new SQLException();
                    }
                }
            }
            
            //On vérifie que le prof existe dans la base          
            if(personnedao.find(id_prof)==null)
                throw new SQLException();
            
            personne=personnedao.find(id_prof);
            if(!personne.getType().equals("enseignant")){
                JOptionPane.showMessageDialog(rootPane, personne.getNom()+" "+personne.getPrenom()+"n'est pas un enseignant");
            }
            else{
                //Demander confirmation
                int confirm=JOptionPane.showConfirmDialog(null, "Ajouter "+personne.getNom()+" "+personne.getPrenom()+" ?");
                if(confirm==JOptionPane.YES_OPTION){
                    //Instancier une inscription
                    enseignement=new Enseignement(id_enseignement,classe,personne,discipline);
                    enseignement=enseignementdao.create(enseignement);

                    Object [] infos={enseignement.getId_enseignement(),personne.getNom(),personne.getPrenom(),discipline.getNom()};
                    modelEnseignement.insertRow(jTable2.getRowCount(), infos);
                    
                    JOptionPane.showConfirmDialog(null,personne.getNom()+" "+personne.getPrenom()+" a été ajouté dans la classe.");
                        
                    allEnseignements=enseignementdao.all();

                    }  
                
                
            }
                           
            
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Il semblerait qu'une erreur soit survenue.");
        }
        
        
    }//GEN-LAST:event_addProfActionPerformed

    
    //Retire un enseignant de la classe (supprimer un enseignement)
    private void deleteProfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteProfActionPerformed
        // TODO add your handling code here:
        
        if(jTable2.getSelectedRow()==-1){//Si aucune ligne est selectionnee
            if(modelEnseignement.getRowCount()==0){
                JOptionPane.showMessageDialog(rootPane, "Le tableau est vide.");
            }
            else{
                JOptionPane.showMessageDialog(rootPane, "Selectionner une ligne.");                
            }
            
        }
        else{
            
            try {
                enseignement=new Enseignement();
                enseignementdao=new EnseignementDAO();
                
                //On récupère la ligne
                int currentRow=jTable2.getSelectedRow();
                
                int id_enseignement=(int) modelEnseignement.getValueAt(currentRow, 0);
                String nom=(String) modelEnseignement.getValueAt(currentRow, 1);
                String prenom=(String) modelEnseignement.getValueAt(currentRow, 2);
                
                enseignement=enseignementdao.find(id_enseignement); //Chercher l'enseignement dans la bdd
                
                //Demande de confirmation
                int confirm=JOptionPane.showConfirmDialog(null, "Voulez-vous vraiment retirer "+nom+" "+prenom+" de la classe ?");
                
                if(confirm==JOptionPane.YES_OPTION){
                    enseignementdao.delete(enseignement); //Enlever de la bdd
                    modelEnseignement.removeRow(currentRow);
                    
                    //on met à jour l'arraylist d'inscriptions
                    allEnseignements=enseignementdao.all();
                    
                }
            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, "Il semblerait qu'une erreur soit survenue.");
            }
            
            
        
        }
    }//GEN-LAST:event_deleteProfActionPerformed

    /**
     *  Retourne l'inscription sélectionnée dans le tableau
     */
    public Inscription selectRegistration(){
        inscription=new Inscription();
        
        //Récupere les infos de la ligne
        int currentRow=jTable1.getSelectedRow();
        
        int id_inscription=(int)modelClass.getValueAt(currentRow,0);
        
        for(int i=0;i<inscriptions.size();i++){
            if(inscriptions.get(i).getId_inscription()==id_inscription){
                inscription=inscriptions.get(i);
            }
            //inscriptions.get(i).afficher();
        }
        
        return inscription;
        
        
    }
    
    //Affiche le bulletin de l'élève sélectionné
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        if(jTable1.getSelectedRow()==-1){
            if(modelClass.getRowCount()==0){
                JOptionPane.showMessageDialog(rootPane, "Le tableau est vide.");
            }
            else{
                JOptionPane.showMessageDialog(rootPane, "Sélectionner une ligne.");
            }
        }
        else{
            //L'inscription courante devient celle qui est sélectionnée dans le tableau
            inscription=selectRegistration();
            inscription.afficher();
            SchoolReport bulletin=new SchoolReport();
            bulletin.setVisible(true);
        }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addProf;
    private javax.swing.JButton addStudent;
    private javax.swing.JLabel className;
    private javax.swing.JButton deleteProf;
    private javax.swing.JButton deleteStudent;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JComboBox<String> subjects;
    // End of variables declaration//GEN-END:variables

}
